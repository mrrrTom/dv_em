program: {
	shape: class
	main(arg int): (result int)
}

emulator: {
	shape: class
}

emulator -> program: {
	target-arrowhead: {
		shape: diamond
		style.filled: true
	}
}

configuration: {
	shape: class
	
	field: cellScheme _memModel
}

cellScheme: {
	shape: class

	field: commandBits # [start, end]
	field: argumentsBits # [start, end]
}

cellScheme -> configuration: {
	target-arrowhead: {
		shape: diamond
		style.filled: true
	}
}

configuration -> emulator: {
	target-arrowhead: {
		shape: diamond
		style.filled: true
	}
}

emulatorInstructionsStore: {
	shape: class
}

emulator -> emulatorInstructionsStore: uses {
}

emulatorInstructionsStore -> executor: uses {
}

view: {
	shape: class
}

view -> emulator: {
	target-arrowhead: {
		shape: diamond
		style.filled: true
	}
}

memoryManager: {
	shape: class
	write(byte int): (result bool)
	read(): (resutl int)
	getCursorPosition()
	setCursorPostion()
	enumerate(): (cells iterator<cell>)
}

memoryManager -> emulator: {
	target-arrowhead: {
		shape: diamond
		style.filled: true
	}
}

cell: {
	shape: class
	field: _commandResolver
	field: _argumentsResolver

	field: _adressSize
	field: adress
	field: cellSize #bits
	field: bits # max number (need compile time check for configuration)
	
	resolveCommand(): (cmd int)
	resolveArguments(): (args int)
}

cell -> memoryManager: {
	target-arrowhead: {
		shape: diamond
		style.filled: true
	}
}

registersManager: {
	shape: class
}

registersManager -> emulator: {
	target-arrowhead: {
		shape: diamond
		style.filled: true
	}
}

pregister: {
	shape: class
}

pregister -> registersManager: {
	target-arrowhead: {
		shape: diamond
		style.filled: true
	}
}

executor: {
	shape: class
}

executor -> emulator: {
	target-arrowhead: {
		shape: diamond
		style.filled: true
	}
}

executor -> memoryManager: uses 
executor -> registersManager: uses

parser: {
	shape: class
}


