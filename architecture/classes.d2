program: {
  shape: class
  main(arg int): (result int)
}

emulator: {
  shape: class
  -_start_command: void (*) (memory_manager mm, registers_manager rm)
  -_executor: executor
  -_mm: memory_manager
  -_rm: registers_manager
  -_vm: variables_manager

  +ctor(char\* configPath, char\* codePath)
  +start()
  +process(char symb, int\* args)
  +stop()
  -destructor()
}

emulator -> program: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

# configuration - is class helper for configurating emulator
configuration: {
  shape: class

  +memory_model: cellSheme
  +registers_model: "registerScheme[]"
  +variables_model: "variableScheme[]"
  +start_state: std::string
  +beat: std::strig
  +kernel_commads: std::unordered_map<std::string, std::string>
  +user_commands: std::unordered_map<std::string, std::string>
  +ctor(char \* path)
  -destructor()
}

register_scheme: {
  shape: class
  +name: std::string # key
  +comment: std::string
  +size: unsigned char # 0 -> 256
  +user_allowed_modes: unsigned char # _wr
}

variable_scheme: {
  shape: class
  +name: std::string # key
  +comment: std::string
  +size: unsigned short int
  +depth: unsigned short int # count in collection if it is not a single value
  +is_visible: bool
  +format_string: std::string
}

cell_scheme: {
  shape: class
  # all invariants must be written down  
  +adress_size: unsigned char
  +command_first_bit: unsigned short int
  +command_last_bit: unsigned short int
  +arguments_firts_bit: unsigned short int
  +arguments_last_bit: unsigned short int
  +fixed_operand_size: bool
  +operand_size: unsigned short int
}

register_scheme -> configuration: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

cell_scheme -> configuration: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

variable_scheme -> configuration: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

configuration -> emulator: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

memory_manager: {
  shape: class

  +set_cursor(unsigned int\[\] adress): bool
  +write(int\[\] bits, unsigned short int start, unsigned short int bits_count): bool
  +read(unsigned short int start, unsigned short int bits_count): "int[]"
  +move_next(): bool
}

memory_manager -> emulator: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

cell: {
  shape: class

  -_command_first_bit: insigned short int
  -_command_last_bit: insigned short int
  -_value_first_bit: insigned short int
  -_value_last_bit: insigned short int

  +adress: "int[]"
  +value: "int[]"
  +get_command(): "int[]"
  +get_operands(): "int[]"
}

cell -> memory_manager: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

registers_manager: {
  shape: class
  -_registers: hash_map<std::string, pregister>
  +write(std\:\:string register_name, int\[\] value, unsigned int short register_offset, unsigned int short value_offset): bool
  +read(std\:\:string register_name, int\[\] \& value, unsigned int short register_offset, unsigned int short result_offset): bool
}

variables_manager: {
  shape: class
  -_variables: hash_map<std::string, variable>
  +write(std\:\:string var_name, unsigned short int index, unsigned short int var_offset, unsigned short int input_offset, int\[\] value): bool
  +read(std\:\:string var_name, unsigned short int index, unsigned short int var_offset, unsigned short int input_offset, int\[\] \& value): bool
}

variable: {
  shape: class
  -_size: unsigned short int
  -_depth: unsigned short int
  -_value: int\[\]\[\]
  +allowed_user_modes: unsigned char # _wr
  +write(int\[\]\[\] value, unsigned short int \[\] input_offsets, unsigned short int \[\] value_offsets, unsigned short int depth_offset): bool
  +read(int\[\]\[\] \& value, unsigned short int \[\] output_offsets, unsigned short int \[\] value_offsets, unsigned short int depth_offset): bool
}

variable -> variables_manager: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

registers_manager -> emulator: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

variables_manager -> emulator: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

pregister: {
  shape: class
  -_size: unsigned short int
  -_value: int\[\]
  +allowed_user_modes: unsigned char # _wr
  +write(int\[\] value, unsigned short int input_offset, unsigned short int value_offset): bool
  +read(int\[\] \& value, unsigned short int output_offset, unsigned short int value_offset): bool
}

pregister -> registersManager: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

executor: {
  shape: class
  -_beat_command: std::unordered_map<std::string, statement\[\]>
  -_kernel_commands: std::unordered_map<std::string, statement\[\]>
  +execute(std\:\:string command, int\[\] args): std::string
  +execute(unsigned short int cell_adress)
}

executor -> emulator: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}

executor -> memoryManager: uses
executor -> registersManager: uses

translator: {
  shape: class
  +translate(std\:\:string command): statement\[\]
  +interpret(std\:\:string state): statement\[\]
  #    @var %reg []mem $special commands from managers #0 #1 #2 ...   input values (for kernel commands)
}

statement: {
  shape: class
  -_type: statement_type
  -_operands: statement\[\]
  +ctor(statement\[\] operands)
  +get_type: statement_type
  +void\* execute(mm\*, rm\*, vm\*) \= \0
}

view: {
  shape: class
}

view -> emulator: {
  target-arrowhead: {
    shape: diamond
    style.filled: true
  }
}
